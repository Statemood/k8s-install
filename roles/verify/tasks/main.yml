---
- name: Stop if not supported OS
  assert:
    that: ansible_os_family in ['RedHat', 'AlmaLinux', 'Rocky', 'TencentOS', 'Debian']
    msg: "{{ ansible_os_family }} is not a supported OS"

- name: Stop when hostname is not specified
  assert:
    that: hostname is defined
    msg: "inventory hostname not specified"

- name: Stop if bad hostname
  assert:
    that: hostname is match("^[A-Za-z0-9-]*$")
    msg: "Hostname must consist of lower case alphanumeric characters '-', and must start and end with an alphanumeric character"
  when: hostname is defined

- name: Fetch resolconf
  block:
    - name: Get content of /etc/resolv.conf
      slurp:
        src: /etc/resolv.conf
      register: resolvconf_slurp

    - name: Get currently configured nameservers
      set_fact:
        configured_nameservers: "{{ resolvconf_slurp.content | b64decode | regex_findall('^nameserver\\s*(\\S*)', multiline=True) | ansible.utils.ipaddr }}"
      when: resolvconf_slurp.content is defined

- name: Stop if /etc/resolv.conf not configured nameservers
  assert:
    that: configured_nameservers | length>0
    fail_msg: "nameserver should not empty in /etc/resolv.conf"

- name: Stop if etcd or master or worker group is empty
  assert:
    that: "groups.get( item )"
    fail_msg: "Group 'etcd' or 'master' or 'worker' cannot be empty"
  with_items:
    - etcd
    - master
    - worker
  run_once: true

- name: Stop if non systemd OS type
  assert:
    that: ansible_service_mgr == "systemd"

- name: Stop if loadbalance domain name is None
  assert:
    that: loadbalance.domain_name != None
    msg: "loadbalance domain name can not null"
  when: loadbalance.domain_name is defined

- name: Stop if even number of etcd hosts
  assert:
    that: groups.etcd|length is not divisibleby 2
  when:
    - inventory_hostname in groups.get('etcd',[])

- name: Stop if unsupported options selected
  assert:
    that:
      - network_plugin in ['calico', 'flannel', 'cilium', 'kuberouter', 'macvlan']
      - kubernetes.kube_proxy_mode in ['iptables', 'ipvs', 'nftables']
    msg: The selected choice is not supported
  run_once: true

- name: Stop if kernel version is too low for nftables
  assert:
    that: ansible_kernel.split('-')[0] is version('5.13', '>=')
  when:
    - kubernetes.kube_proxy_mode == 'nftables'

- name: Stop if flannel incompatible network plugin
  assert:
    that: flannel.network_mode in ['vxlan', 'host-gw']
    msg: "When using network_plugin flannel network_mode must be 'vxlan' or 'host-gw'"
  when:
    - network_plugin == 'flannel'

- name: Stop if calico incompatible network plugin
  assert:
    that: calico.network_mode in ['ipip', 'bgp','mix']
    msg: "When using network_plugin calico network_mode must be 'ipip' or 'bgp' or 'mix'"
  when:
    - network_plugin == 'calico'

- name: Stop if cilium kernel version is too low
  assert:
    that: ansible_kernel.split('-')[0] is version('4.9.17', '>=')
    msg: "When using network_plugin cilium kernel version must be >= 4.9.17 "
  when:
    - network_plugin == 'cilium'

- name: "Check that kubernetes.service_addresses is a network range"
  assert:
    that:
      - kubernetes.service_addresses | ansible.utils.ipaddr('net')
    msg: "kubernetes.service_addresses = '{{ kubernetes.service_addresses }}' is not a valid network range"
  run_once: true
  when: kubernetes.ipv4_stack | bool

- name: "Check that kubernetes.pods_subnet is a network range"
  assert:
    that:
      - kubernetes.pods_subnet | ansible.utils.ipaddr('net')
    msg: "kubernetes.pods_subnet = '{{ kubernetes.pods_subnet }}' is not a valid network range"
  run_once: true
  when: kubernetes.ipv4_stack | bool

- name: "Check that kubernetes.pods_subnet does not collide with kubernetes.service_addresses"
  assert:
    that:
      - kubernetes.pods_subnet | ansible.utils.ipaddr(kubernetes.service_addresses) | string == 'None'
    msg: "kubernetes.pods_subnet cannot be the same network segment as kubernetes.service_addresses"
  run_once: true
  when: kubernetes.ipv4_stack | bool

- name: "Check that kubernetes.service_addresses_ipv6 is a network range"
  assert:
    that:
      - kubernetes.service_addresses_ipv6 | ansible.utils.ipaddr('net')
    msg: "kubernetes.service_addresses_ipv6 = '{{ kubernetes.service_addresses_ipv6 }}' is not a valid network range"
  run_once: true
  when: kubernetes.ipv6_stack | bool

- name: "Check that kubernetes.pods_subnet_ipv6 is a network range"
  assert:
    that:
      - kubernetes.pods_subnet_ipv6 | ansible.utils.ipaddr('net')
    msg: "kubernetes.pods_subnet_ipv6 = '{{ kubernetes.pods_subnet_ipv6 }}' is not a valid network range"
  run_once: true
  when: kubernetes.ipv6_stack | bool

- name: "Check that kubernetes.pods_subnet_ipv6 does not collide with kubernetes.service_addresses"
  assert:
    that:
      - kubernetes.pods_subnet_ipv6 | ansible.utils.ipaddr(kubernetes.service_addresses_ipv6) | string == 'None'
    msg: "kubernetes.pods_subnet_ipv6 cannot be the same network segment as kubernetes.service_addresses_ipv6"
  run_once: true
  when: kubernetes.ipv6_stack | bool

- name: "Guarantee that enough network address space is available for all pods"
  assert:
    that: "{{ (kubernetes.kubelet_max_pods | default(110)) | int <= (2 ** (32 - kubernetes.node_prefix | int)) - 2 }}"
    msg: "Do not schedule more pods on a node than inet addresses are available."
  when: network_plugin != 'calico'
  run_once: true

- name: "Stop if ip var does not match local ips"
  assert:
    that: ( ansible_default_ipv4 is defined ) and ( ansible_default_ipv4.address is defined )
    msg: "IPv4: '{{ ansible_default_ipv4 }}' do not contain host ip"
  when: kubernetes.ipv4_stack | bool

- name: "Stop if ipv6 does not match local ips"
  assert:
    that: ( ansible_default_ipv6 is defined ) and ( ansible_default_ipv6.address is defined )
    msg: "IPv6: '{{ ansible_default_ipv6 }}' do not contain host ip"
  when: kubernetes.ipv6_stack | bool

- name: Stop when nodeport range is not specified
  assert:
    that: kubernetes.service_node_port_range is defined
    msg: "service_node_port_range not specified"
