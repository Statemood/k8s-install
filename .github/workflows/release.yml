name: Docker Image && Kubernetes Release

on:
  push:
    branches:
      - main
    paths:
      - 'group_vars/all.yml'

  pull_request:
    branches:
      - main
    paths:
      - 'group_vars/all.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.12]

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get k8s Version
      id: get_k8s_version
      run: |
        k8s_version=$(python -c "import yaml; data = yaml.safe_load(open('group_vars/all.yml')); print(data['kubernetes']['version'])")
        echo "k8s_version=$k8s_version" >> $GITHUB_ENV

    - name: Check if tag exists
      id: check_tag
      run: |
        TAG_NAME=${{ env.k8s_version }}
        
        # Check if tag exists
        if git tag --list | grep -q "^${TAG_NAME}$"; then
          echo "Tag '${TAG_NAME}' exists, skipping release upload."
          echo "exists=true" >> $GITHUB_ENV
        else
          echo "Tag '${TAG_NAME}' does not exist, preparing to upload release."
          echo "exists=false" >> $GITHUB_ENV
        fi

    - name: Download
      if: env.exists == 'false'
      run: |
        wget https://dl.k8s.io/release/${{ env.k8s_version }}/bin/linux/amd64/kubectl
        wget https://dl.k8s.io/release/${{ env.k8s_version }}/bin/linux/amd64/kube-apiserver
        wget https://dl.k8s.io/release/${{ env.k8s_version }}/bin/linux/amd64/kube-controller-manager
        wget https://dl.k8s.io/release/${{ env.k8s_version }}/bin/linux/amd64/kube-scheduler
        wget https://dl.k8s.io/release/${{ env.k8s_version }}/bin/linux/amd64/kubelet
        wget https://dl.k8s.io/release/${{ env.k8s_version }}/bin/linux/amd64/kube-proxy
    
    - name: Push Release
      uses: softprops/action-gh-release@v2
      if: env.exists == 'false'
      with:
        token: ${{ secrets.GIT_TOKEN }}
        tag_name:  ${{ env.k8s_version }}
        preserve_order: true
        files: |
          kubectl
          kube-apiserver
          kube-controller-manager
          kube-scheduler
          kubelet
          kube-proxy

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml

    - name: Run script
      run: |
        python generate.py

    - name: Sync Images
      uses: hhyasdf/image-sync-action@v1.1
      with:
        auth_file: ./auth.yaml
        images_file: ./images.yaml
        version: latest
        proc: 6
      env:
        ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
        ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
        DKH_USERNAME: ${{ secrets.DKH_USERNAME }}
        DKH_PASSWORD: ${{ secrets.DKH_PASSWORD }}
